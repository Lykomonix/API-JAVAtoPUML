@startuml

skinparam style strictuml
skinparam classAttributeIconSize 0
skinparam classFontStyle Bold
hide empty members

Package "western" {
class Boisson
{
+ <<create>> Boisson(nom : String, genre : Genre) 
+ getNom() : String
+ getGenre() : Genre
+ getNomAvecArticleIndefini() : String
+ getNomAvecArticlePartitif() : String
+ getNomAvecArticleDefini() : String
+ getNomAvecPreposition(preposition : String) : String
}

class Brigand
{
- recompense : Integer
- estLibre : Boolean
+ <<create>> Brigand(nom : String) 
+ <<create>> Brigand(nom : String, boisson : Boisson) 
+ <<create>> Brigand(nom : String, boisson : Boisson, look : String) 
+ getLook() : String
+ getRecompense() : int
+ estLibre() : boolean
+ kidnapper(dame : Dame) 
+ seFaireCapturer(cowBoy : Cowboy) 
+ seFaireTirerDessus(cowBoy : Cowboy) 
+ getPseudo() : String
+ getCaptives() : List
+ sePresenter() 
+ {static} getBoissonParDefaut() : Boisson
+ {static} setBoissonParDefaut(boisson : Boisson) 
}

class Cowboy
{
- gains : Integer
+ <<create>> Cowboy(nom : String) 
+ <<create>> Cowboy(nom : String, boisson : Boisson) 
+ getPseudo() : String
+ liberer(dame : Dame) 
+ liberer(captives : List) 
+ capturer(horsLaLoi : HorsLaLoi) 
+ tirerSur(brigand : HorsLaLoi) 
+ sePresenter() 
+ {static} getBoissonParDefaut() : Boisson
+ {static} setBoissonParDefaut(boisson : Boisson) 
}

class Dame
{
- estLibre : Boolean
+ <<create>> Dame(nom : String) 
+ <<create>> Dame(nom : String, boisson : Boisson) 
+ getPseudo() : String
+ seFaireKidnapper(horsLaLoi : HorsLaLoi) 
+ seFaireLiberer(cowBoy : Cowboy) 
+ estLibre() : boolean
+ sePresenter() 
+ {static} getBoissonParDefaut() : Boisson
+ {static} setBoissonParDefaut(boisson : Boisson) 
+ getRavisseur() : HorsLaLoi
}

class Histoire4
{
+ <<create>> Histoire4() 
+ {static} main(args : String[]) 
}

class Narrateur
{
+ <<create>> Narrateur() 
+ <<create>> Narrateur(nom : String) 
+ dire(texte : String) 
+ boire(boisson : Boisson) 
+ boire() 
+ getPseudo() : String
}

class Personnage
{
+ <<create>> Personnage(nom : String) 
+ <<create>> Personnage(nom : String, boisson : Boisson) 
+ dire(texte : String) 
+ sePresenter() 
+ boire(boisson : Boisson) 
+ boire() 
+ getNom() : String
+ getBoisson() : Boisson
+ {static} getPseudos(personnages : List) : String
+ {static} getBoissonParDefaut() : Boisson
}

class Ripou
{
+ <<create>> Ripou(nom : String) 
+ <<create>> Ripou(nom : String, boisson : Boisson) 
+ <<create>> Ripou(nom : String, boisson : Boisson, look : String) 
+ getLook() : String
+ estLibre() : boolean
+ getRecompense() : int
+ kidnapper(dame : Dame) 
+ getCaptives() : List
+ seFaireCapturer(cowBoy : Cowboy) 
+ seFaireTirerDessus(cowBoy : Cowboy) 
+ getPseudo() : String
+ sePresenter() 
+ liberer(dame : Dame) 
}

class Substantif
{
+ <<create>> Substantif(nom : String, genre : Genre) 
+ getNom() : String
+ getGenre() : Genre
+ toString() : String
+ {static} isVowel(c : char) : boolean
+ {static} startsWithVowel(s : String) : boolean
+ getArticleIndefini() : String
+ avecArticleIndefini() : String
+ {static} getArticleDefini(genre : Genre) : String
+ getArticleDefini() : String
+ avecArticleDefini() : String
+ {static} faireElision(article : String) : String
+ elision() : boolean
+ getArticlePartitif() : String
+ avecArticlePartitif() : String
+ avecElision(article : String) : String
+ avecPreposition(preposition : String) : String
}

class "<<interface>>\n HorsLaLoi" as HorsLaLoi
{
+ {abstract} estLibre() : boolean
+ {abstract} getRecompense() : int
+ {abstract} kidnapper(dame : Dame) 
+ {abstract} seFaireCapturer(cowBoy : Cowboy) 
+ {abstract} seFaireTirerDessus(cowBoy : Cowboy) 
+ {abstract} getLook() : String
+ {abstract} getCaptives() : List

}

class "<<interface>>\n Nommable" as Nommable
{
+ {abstract} getNom() : String
+ {abstract} getPseudo() : String

}

class "<<enumeration>>\n Genre" as Genre
{
FEMININ
MASCULIN
}

}

@enduml

