@startuml

skinparam style strictuml
skinparam classAttributeIconSize 0
skinparam classFontStyle Bold
hide empty members

Package "pumlFromJava" {


class PumlLink

Interface PumlLinkable

enum LinkType

enum VariableKind

PumlDoclet ..> PumlDiagram : use
Java2Puml ..> PumlDoclet : lance
PumlDiagram o...> PumlPackage : use
PumlPackage o..> PumlClass : use
PumlPackage o..> PumlInterface : use
PumlPackage o..> PumlEnum : use
PumlDoclet *--> OutOption : nested class
PumlDoclet *--> DirectoryOption : nested class
PumlLink ..> LinkType : use
PumlInterface o--> PumlLink
PumlClass o--> PumlLink
VariableKind ..> PumlVariable
}

@enduml
@startuml

skinparam style strictuml
skinparam classAttributeIconSize 0
skinparam classFontStyle Bold
hide empty members

Package "pumlFromJava" {

class Java2Puml
{
    + {static} Main(String[] args)
}

class PumlDoclet implements Doclet
{
    -pumlDiagram: PumlDiagram
    -filename: String
    -directory: String
    + init(Locale locale, Reporter reporter){redefines Doclet::init}
    + getName(): String{redefines Doclet::getName}
    + getSupportedOptions(): Set<? extends Option>{redefines Doclet::getSupportedOptions}
    + getSupportedSourceVersion(): SourceVersion{redefines Doclet::getSupportedSourceVersion}
    + run(DocletEnvironment environment): boolean{redefines Doclet::run}
    - InitPumlDiagram(DocletEnvironment env)
    - WritePuml()
}

class OutOption implements Doclet.Option
{
    + getArgumentCount(): int{redefines Doclet.Option::getArgumentCount}
    + getDescription(): String{redefines Doclet.Option::getDescription}
    + getKind(): Kind{redefines Doclet.Option::getKind}
    + getNames(): List<String>{redefines Doclet.Option::getNames}
    + getParameters(): String{redefines Doclet.Option::getParameters}
    + process(String option, List<String> arguments): boolean{redefines Doclet.Option::process}
}

class DirectoryOption implements Doclet.Option
{
    + getArgumentCount(): int{redefines Doclet.Option::getArgumentCount}
    + getDescription(): String{redefines Doclet.Option::getDescription}
    + getKind(): Kind{redefines Doclet.Option::getKind}
    + getNames(): List<String>{redefines Doclet.Option::getNames}
    + getParameters(): String{redefines Doclet.Option::getParameters}
    + process(String option, List<String> arguments): boolean{redefines Doclet.Option::process}
}


class PumlElement
{
    +toDCA(): String{abstract}
}

class PumlDiagram extends PumlElement
{
    - skinparam: String
    - directory: String
    - filename: String
    - package: List<PumlPackage>
    - env: DocletEnvironment
    + <<create>> PumlDiagram(DocletEnvironment env)
    - RetrievePackages()
    + toDCA(): String{redefines PumlElement::toDCA}
    + setDirectory(String directory)
    + setFilename(String filename)
    + getDirectory(): String
    + getFilename(): String
    + getPackageList(): List<PumlPackage>
}

class PumlPackage extends PumlElement
{
    - classList: List<PumlClass>
    - interfaceList: List<PumlInterface>
    - enumList: List<PumlEnum>
    - element: Element
    + <<create>> PumlPackage(Element element)
    - RetrieveElements()
    + toDCA(): String{redefines PumlElement::toDCA}
    + getName(): String
}

class PumlClass extends PumlElement
{
    - element: Element
    + <<create>> PumlPackage(Element element)
    + getName(): String
    + toDCA(): String{redefines PumlElement::toDCA}
    - getPrimitiveVariables(): String
}

class PumlEnum extends PumlElement
{
    - element: Element
    + <<create>> PumlPackage(Element element)
    + getName(): String
    + toDCA(): String{redefines PumlElement::toDCA}
    - getEnumElements(): String
}

class PumlInterface extends PumlElement
{
    - element: Element
    + <<create>> PumlPackage(Element element)
    + getName(): String
    + toDCA(): String{redefines PumlElement::toDCA}
}

class PumlLink
{
    - firstElement: String
    - secondElement: String
    - linkType: LinkType
    + <<create>> PumlLink(String firstElement,String secondElement, LinkType linkType)
    + getLinkType(): LinkType
    + getFirstElement(): String
    + getSecondElement(): String
    {static}+ RetrieveLinks(Element element, ArrayList<PumlVariable> variableList): ArrayList<PumlLink>
    {static}- getSuperClassLink(Element element): PumlLink
    {static}- getInterfacesLinks(Element element): ArrayList<PumlLink>
    {static}- getAssociatons(Element element, ArrayList<PumlVariable> variableList): ArrayList<PumlLink>
    {static}+ linksToString(ArrayList<PumlLink> links): String
}

class PumlVariable extends PumlElement
{
    - Element: element
    - VariableKind: kind
    + <<create>> PumlVariable(Element element, VariableKind kind)
    + TypeToString(): String
    + toDCA(): String
    + getElement(): Element
    + getKind(): VariableKind
}

enum LinkType
{
    EXTENDS
    IMPLEMENTS
    ASSOCIATE
}

enum VariableKind
{
    PRIMITIVE
    OBJECT
    ENUM
}

PumlDoclet ..> PumlDiagram : use
Java2Puml ..> PumlDoclet : lance
PumlDiagram o...> PumlPackage : use
PumlPackage o..> PumlClass : use
PumlPackage o..> PumlInterface : use
PumlPackage o..> PumlEnum : use
PumlLink ..> LinkType : use
PumlInterface o--> PumlLink
PumlClass o--> PumlLink
VariableKind ..> PumlVariable
}

@enduml


